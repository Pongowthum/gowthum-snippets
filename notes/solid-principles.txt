SOLID principles 
    - Five design principles in Object Oriented Pragramming
    - Designed for Code maintainability, scalability and robustness


S - Single Responsibility principle
O - Open / Close principle
L - Liskov substitution principle
I - Interface segregation principle
D - Depencency inversion principle

Single Responsibility Principle (SRP):
    - A Class should have only one job to do not more than that
    Ex: If there is a class called product, then order must be in a seprate class

Open Close Principle (OCP):
    - This principle state that a class should be open for extension but closed for modification
    - Should we considered where new implementations are expected
    Ex: 
     Wrong:
        class Notification{
            void sendNotification(String type, String message){
                if(type.equaks("EMAIL")) ...
                else if(type.equaks("SMS")) ...
            }
        }
    Correct:
        interface Notification{}
        class emailNotification extends Notification{}
        class smsNotification extends Notification{}

Liskov Substitution Principle (LSP):
    - Objects of superclass should be replaceable with the objects of sub class without breaking the functionality
    Ex: Consider a class Car has a property fuelLevel, and being extended by petrol/diesel car is fine, 
        but when the car is extended by electric car it will brake, so it is advisable to extend with ICECar,
        and in that ICECar we need to introduce a property called fuelLevel
